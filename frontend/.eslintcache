[{"/Users/mica/Projects/Websites/micahorton/frontend/src/index.js":"1","/Users/mica/Projects/Websites/micahorton/frontend/src/App.js":"2","/Users/mica/Projects/Websites/micahorton/frontend/src/components/navbar.js":"3","/Users/mica/Projects/Websites/micahorton/frontend/src/components/about.js":"4","/Users/mica/Projects/Websites/micahorton/frontend/src/components/projects.js":"5","/Users/mica/Projects/Websites/micahorton/frontend/src/components/blog.js":"6","/Users/mica/Projects/Websites/micahorton/frontend/src/components/single.js":"7","/Users/mica/Projects/Websites/micahorton/frontend/src/components/contact.js":"8","/Users/mica/Projects/Websites/micahorton/frontend/src/api.js":"9"},{"size":165,"mtime":1611763292652,"results":"10","hashOfConfig":"11"},{"size":774,"mtime":1619637715616,"results":"12","hashOfConfig":"11"},{"size":3756,"mtime":1611765547557,"results":"13","hashOfConfig":"11"},{"size":2863,"mtime":1611765547555,"results":"14","hashOfConfig":"11"},{"size":3962,"mtime":1611727893082,"results":"15","hashOfConfig":"11"},{"size":2206,"mtime":1619637928991,"results":"16","hashOfConfig":"11"},{"size":806,"mtime":1619637835991,"results":"17","hashOfConfig":"11"},{"size":2503,"mtime":1612225743827,"results":"18","hashOfConfig":"11"},{"size":688,"mtime":1619588840032,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"sduoag",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mica/Projects/Websites/micahorton/frontend/src/index.js",[],["41","42"],"/Users/mica/Projects/Websites/micahorton/frontend/src/App.js",[],"/Users/mica/Projects/Websites/micahorton/frontend/src/components/navbar.js",["43"],"import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from '../styles/navbar.module.css';\n\nexport default class Navbar extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {active: [true, false, false, false]};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(current) { \n    const newActive = [false, false, false, false];\n    newActive[current] = true;\n    this.setState({active: newActive});  \n    \n  } \n\n  render() {\n    return (\n      <nav className={styles.nav}>\n        <Link to=\"/\" className={`${styles.navItem} ${styles.orange} ${this.state.active[0] && styles.active}`} onClick={() => this.handleClick(0)} >About</Link>\n        <Link to=\"/projects\"  className={`${styles.navItem} ${styles.green} ${this.state.active[1] && styles.active}`} onClick={() => this.handleClick(1)} >Projects</Link>\n        <Link to=\"/blog\" className={`${styles.navItem} ${styles.red} ${this.state.active[2] && styles.active}`} onClick={() => this.handleClick(2)} >Blog</Link>\n        <Link to=\"/contact\" className={`${styles.navItem} ${styles.purple} ${this.state.active[3] && styles.active}`} onClick={() => this.handleClick(3)} >Contact</Link>\n        <span className={`${styles.navIndicator} \n          ${this.state.active[0] && styles.orange}\n          ${this.state.active[1] && styles.green}\n          ${this.state.active[2] && styles.red}\n          ${this.state.active[3] && styles.purple}\n        `}></span>\n\n\n      </nav>\n      \n    );\n  }\n}\n\n/*\n\n\n\nopen Github in new tab or nah?\ntarget=\"_blank\" \n\n\nToggle Class Onclick\nhttps://stackoverflow.com/questions/42630473/react-toggle-class-onclick#42630743\n\nGet Clicked Element\nhttps://stackoverflow.com/questions/55547780/how-to-get-a-clicked-element-in-react\n\nNavbar Insparation\nhttps://codepen.io/knyttneve/pen/LKrGBy\n\nAttempt At Doing Cool Animation Thing (but fail):\n\nhandleClick = () => {\n  console.log('Button clicked! This is: ', this)\n\n  const items = document.querySelectorAll('.nav-item');\n  const indicator = document.querySelector('.nav-indicator');\n\n  items.forEach(item => {\n    item.classList.remove('is-active');\n    item.removeAttribute('style');\n  });\n\n}\n\n\nconst indicator = document.querySelector('.nav-indicator');\nconst items = document.querySelectorAll('.nav-item');\n\nfunction handleIndicator(el) {\n  items.forEach(item => {\n    item.classList.remove('is-active');\n    item.removeAttribute('style');\n  });\n  \n  indicator.style.width = `${el.offsetWidth}px`;\n  indicator.style.left = `${el.offsetLeft}px`;\n  indicator.style.backgroundColor = el.getAttribute('active-color');\n\n  el.classList.add('is-active');\n  el.style.color = el.getAttribute('active-color');\n}\n\n\nitems.forEach((item, index) => {\n  item.addEventListener('click', (e) => { handleIndicator(e.target)});\n  item.classList.contains('is-active') && handleIndicator(item);\n});\n\n*/","/Users/mica/Projects/Websites/micahorton/frontend/src/components/about.js",[],"/Users/mica/Projects/Websites/micahorton/frontend/src/components/projects.js",[],"/Users/mica/Projects/Websites/micahorton/frontend/src/components/blog.js",["44"],"/Users/mica/Projects/Websites/micahorton/frontend/src/components/single.js",[],"/Users/mica/Projects/Websites/micahorton/frontend/src/components/contact.js",["45"],"import React, { Component } from 'react';\nimport { sendEmail } from '../api';\n\nexport default class Contact extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            message: '',\n            alert: false,\n            required: true\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {     \n        const name = e.target.name; \n        const value = e.target.value;\n        this.setState({\n            [name]: value\n        });    \n\n        \n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const email = this.state;\n        \n        this.setState({\n            name: '',\n            email: '',\n            message: '',\n            alert: true,\n            required: false\n        });\n\n        sendEmail(email)\n        .then(res => console.log(res))\n        .catch(err => console.log(err))\n        \n    }\n\n\n    render() {\n        if (this.state.alert) {\n            alert = \n                <div>\n                    Message has been sent!\n                </div>;\n        }\n        let required = this.state.required;\n\n        return (\n                <main>\n                <section>\n                        <h1>Contact Me</h1>\n                        <form onSubmit={this.handleSubmit}>\n                        <label>\n                                Name\n                                <input name='name' type='text' value={this.state.name} \n                                onChange={this.handleChange} required={required} />                \n                        </label>\n\n                        <label>\n                                Email\n                                <input name='email' type='email' value={this.state.email} \n                                onChange={this.handleChange} required={required} />                \n                        </label>\n\n                        <label>\n                                Message\n                                <textarea name='message' rows='10' value={this.state.message} \n                                onChange={this.handleChange} required={required} />                \n                        </label>\n\n                        <input type='submit' value='Submit' />\n\n                        {alert}\n                        </form>\n                </section>\n                </main>\n\n                \n\n        );\n    }\n}\n\n","/Users/mica/Projects/Websites/micahorton/frontend/src/api.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":15,"column":9,"nodeType":"52","messageId":"53","endLine":28,"endColumn":10},{"ruleId":"54","severity":1,"message":"55","line":40,"column":55,"nodeType":"56","messageId":"57","endLine":40,"endColumn":57},{"ruleId":"46","severity":1,"message":"58","line":50,"column":13,"nodeType":"59","messageId":"60","endLine":50,"endColumn":18},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Read-only global 'alert' should not be modified.","Identifier","nativeReassign","no-global-assign","no-unsafe-negation"]